

  	// Faz a leitura da tensao no Sensor de Temperatura
	int SensorTempTensao=analogRead(A0);

  	// Converte a tensao lida
	float Tensao=SensorTempTensao*5;
	Tensao/=1024;

  	// Converte a tensao lida em Graus Celsius
	float TemperaturaC=(Tensao-0.5)*100;
  	
  	//PRINTA A TEMPERATURA AMBIENTE
    Serial.print(TemperaturaC);
    Serial.println(" Graus Celsius");

#include <SPI.h>
#include <MFRC522.h>
 
#define SS_PIN 10
#define RST_PIN 9

MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance.
 
void setup() 
{
 
  SPI.begin();      // Initiate  SPI bus
  mfrc522.PCD_Init();   // Initiate MFRC522

}
void loop() 
{
  // Look for new cards
  if ( ! mfrc522.PICC_IsNewCardPresent()) 
  {
    return;
  }
  // Select one of the cards
  if ( ! mfrc522.PICC_ReadCardSerial()) 
  {
    return;
  }

  String content= "";
  byte letter;
  for (byte i = 0; i < mfrc522.uid.size; i++) 
  {
     Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
     Serial.print(mfrc522.uid.uidByte[i], HEX);
     content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
     content.concat(String(mfrc522.uid.uidByte[i], HEX));
  }

  content.toUpperCase();

  if (content.substring(1) == "XX XX XX XX" ) //change here the UID of the card/cards that you want to give access
  {
    digitalWrite(LED_G, HIGH);
    Serial.println("Authorized access");
    Serial.println();
    delay(3000);
    digitalWrite(LED_G, LOW);    
  }
 else  
  {
    digitalWrite(LED_R, HIGH);
    Serial.println(" Access denied");
    delay(3000);
    digitalWrite(LED_R, LOW);
  }
} 



#include <Wire.h> //Biblioteca para uso do protocolo I2C;
#include <Adafruit_GFX.h> //Biblioteca para manipulação gráfica no display;
#include <Adafruit_SH1106.h> //Biblioteca para operação do driver de controle do display;

#include <Fonts/FreeMono9pt7b.h> //Fonte para alteração do texto;
#include <Fonts/FreeSansBoldOblique9pt7b.h> //Fonte para alteração do texto;
#include <Fonts/FreeMonoOblique9pt7b.h> //Fonte para alteração do texto;

#define OLED_RESET -1 //Em displays que não possuem pino RESET, é dado o valor -1;

#include <SPI.h>
#include <MFRC522.h>
 
#define SS_PIN 10
#define RST_PIN 9

MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance.
 

Adafruit_SH1106 display(OLED_RESET); //Declaração da tela com o nome "display";

int LDR = 0;
int buzzer = 8; 
int tempPino = A0;
float tensao;

void setup()
{
  SPI.begin();      // Initiate  SPI bus
  mfrc522.PCD_Init();   // Initiate MFRC522

  pinMode(A1, INPUT);
  pinMode(buzzer, OUTPUT);
  pinMode(tempPino, INPUT);
  display.begin(SH1106_SWITCHCAPVCC, 0x3C);
  Serial.begin(9600);
}

void loop()
{
    String content = ""; // Declare content aqui

  do{

  int sensorTemp = analogRead(tempPino);
  tensao = sensorTemp * 5;
  tensao /= 1024;
  float temperaturaC = (tensao) * 100;

  int LDR = analogRead(A1);

  display.clearDisplay(); //Comando para limpar a tela;
  display.setFont(&FreeMonoOblique9pt7b); //Comando para definir a fonte que será utilizada;
  display.setTextColor(WHITE); //Comando para definir a cor do texto;
  display.setTextSize(1); //Comando para definir tamanho od
  display.setCursor(25, 30); //Definição de onde o texto será escrito. Lembre se que: linha, coluna;
  display.print(temperaturaC); //Texto a ser escrito;
  display.setCursor(85, 30);
  display.print("C");

  display.setCursor(1, 15);
  display.print("TEMPERATURA");

  display.display();

  /*display.print("CONFIGURACOES");
  display.setCursor(5, 30);
  display.print("OPCAO 1 - CELSIUS");
  display.setCursor(5, 40);
  display.print("OPCAO 2 - KELVIN");
  display.display();
  display.clearDisplay();*/

delay(500);
  	while (LDR<350){
      int sensorTemp = analogRead(tempPino);
      tensao = sensorTemp * 5;
      tensao /= 1024;
      temperaturaC = (tensao) * 100;

      LDR = analogRead(A1);

      display.clearDisplay(); //Comando para limpar a tela;
      display.setCursor(35, 13); //Definição de onde o texto será escrito. Lembre se que: linha, coluna;
      display.print(temperaturaC); //Texto a ser escrito;
      display.display();
      delay(500);
      display.clearDisplay(); //Comando para limpar a tela;
      display.setCursor(35, 13); //Definição de onde o texto será escrito. Lembre se que: linha, coluna;
      display.print(""); //Texto a ser escrito;]
      display.display();
      delay(100);
      tone(buzzer, 200, 1000);
      delay(100);
      noTone(buzzer);
      delay(500); 
    }

          // Look for new cards
  if ( ! mfrc522.PICC_IsNewCardPresent()) 
  {
    return;
  }
  // Select one of the cards
  if ( ! mfrc522.PICC_ReadCardSerial()) 
  {
    return;
  }

  byte letter;
  for (byte i = 0; i < mfrc522.uid.size; i++) 
  {
     Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
     Serial.print(mfrc522.uid.uidByte[i], HEX);
     content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
     content.concat(String(mfrc522.uid.uidByte[i], HEX));
  }

  content.toUpperCase();
    
  }while (content.substring(1) != "70 36 13 A4");

  display.clearDisplay(); //Comando para limpar a tela;
  display.setFont(&FreeMonoOblique9pt7b); //Comando para definir a fonte que será utilizada;
  display.setTextColor(WHITE); //Comando para definir a cor do texto;
  display.setTextSize(1); //Comando para definir tamanho od

  display.setCursor(1, 15);
  display.print("ACESSO");
  display.setCursor(1, 30);
  display.print("LIBERADO");

  display.setCursor(5, 45);
  display.print("[1] CONFIG");
  display.setCursor(5, 60);
  display.print("[2] BACK");
  display.display();
  delay(2000);

}





